{
    /**
     * The name of the package.
     */
    "name": "postgrest-apikit",

    /**
     * Alternate names for this package.
     *
     *    "alternateName": [],
     */

    /**
     * The package type.
     *
     * Sencha Cmd understands the following types of packages:
     *  - code : An arbitrary package of code for use by applications or other packages.
     *  - theme : A package to be used as an applicationâ€™s theme.
     *  - locale : A package containing localization strings or locale-specific code.
     *  - template : A package containing one or more templates.
     */
    "type": "code",

     /**
      * The author of the package.
      *
      * Required only if you are distributing this package through a Sencha Cmd repository,
      * in which case it should match the name you assign to your local package repository.
      */
    "creator": "Jeffrey Mealo",

    /**
     * A summarized description of this package.
     */
    "summary": "postgrest API Kit",

    /**
     * A detailed description of this package.
     */
    "detailedDescription": "Toolkit for Sencha ExtJS and Touch apps that need to integrate with an postgrest API",

    /**
     * The package version.
     *
     * Typically, changes to the package should come along with changes to the version.
     * This number should be in this format: d+(.d+)*
     */
    "version": "1.0.0",

    /**
     * The version that users can transparently update from without requiring code changes.
     *
     * In addition the version property, packages can also indicate the degree to which
     * they are backward compatible using the compatVersion property.
     */
    "compatVersion": "1.0.0",

    /**
     * Spec. version of this package.json file.
     * This is set automatically by Sencha Cmd when first generating this file
     */
    "format": "1",

    /**
     * Controls the output directory.
     */
    "output": "${package.dir}/build",

    /**
     * Indicates whether this is a locally developed package or downloaded form a repository.
     * Defaults to true on newly generated packages, should not be changed.
     */
    "local": true,

    /**
     * This is the comma-separated list of folders where classes reside. These
     * classes must be explicitly required to be included in the build.
     */
    "classpath": "${package.dir}/src,${package.dir}/${toolkit.name}/src",

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be automatically required and included in the build.
     * If any file defines an Ext JS override (using Ext.define with an "override" property),
     * that override will in fact only be included in the build if the target class specified
     * in the "override" property is also included.
     */
    "overrides": "${package.dir}/overrides,${package.dir}/${toolkit.name}/overrides",

    "example": {
        /**
         * One or more folders that contain example applications for this package.
         */
        "path": [
            "${package.dir}/examples"
        ]

        /**
         * You can list apps specifically.
         *
         *      "apps": [
         *          "demo1",
         *          "demo2"
         *      ]
         *
         * By default, all subfolders in the path are considered example applications.
         */
    },

    /**
     * The framework this package will use (i.e., "ext" or "touch").
     * This is only needed if the built package will be used by a non-Cmd application.
     *
     *     "framework": "ext",
     */

    /**
     * Packages can require other packages in the same way that applications can require
     * packages.
     *
     * Can be specified as an array of package names or configuration objects.
     *
     *      "requires": [
     *          "foo",
     *          "bar@1.1-2.0",
     *          {
     *              "name": "baz"
     *              "version": "1.5"
     *          }
     *      ]
     *
     * Can also be specified as an object:
     *
     *      "requires": {
     *          "foo": "2.2",
     *          "bar": {
     *              "minVersion": "1.1",
     *              "version": "2.0"
     *          }
     *      }
     */
    "requires": []
}
